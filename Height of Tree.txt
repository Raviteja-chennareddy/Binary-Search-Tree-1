#include <iostream>
#include <algorithm>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

Node* createNode(int value) {
    return new Node(value);
}

Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

int tree_height(Node* root) {
    if (root == nullptr) {
        return -1; 
    }
    int left_height = tree_height(root->left);
    int right_height = tree_height(root->right);
    return max(left_height, right_height) + 1;
}

int main() {
    int T;
    cin >> T;

    for (int t = 1; t <= T; ++t) {
        int N;
        cin >> N;

        Node* root = nullptr;
        for (int i = 0; i < N; ++i) {
            int value;
            cin >> value;
            root = insert(root, value);
        }

        int height = tree_height(root);
        cout << height << endl;

    }

    return 0;
}
