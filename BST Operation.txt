#include <iostream>
using namespace std;
class Node
{
  public:
  int data;
  Node *left;
  Node *right;
  Node(int val)
  {
      this->data=val;
      this->left=NULL;
      this->right=NULL;
  }
};
class tree{
    public:
    Node *root = NULL;
    
    Node *create_node_and_insert(Node *root,int val){
        if(root==NULL)
        {
            return new Node(val);
        }
        else if(val<root->data)
        {
            root->left=create_node_and_insert(root->left,val);
        }
        else{
            root->right=create_node_and_insert(root->right,val);
        }
        return root;
    }
    void insert(int val){
       root= create_node_and_insert(root,val);
    }
    
    void pre(){
        pre_order(root);
        std::cout << std::endl;
    }

    void pre_order(Node *root){
        if(root==NULL)
        {
            return;
        }
        cout<<root->data<<" ";
        pre_order(root->left);
        pre_order(root->right);
    }
    
    void delete_node(int target){
        root = deletionBST(root, target);
    }
    
    Node* deletionBST(Node* root, int target) {
        if (!root) return root;
    
        if (target < root->data) {
            root->left = deletionBST(root->left, target);
            return root;
        }
        
        else if (target > root->data) {
            root->right = deletionBST(root->right, target);
            return root;
        }
    
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
    
        Node* cur = root->right;
        while (cur->left) cur = cur->left;
    
        root->data = cur->data;
        root->right = deletionBST(root->right, cur->data);
    
        return root;
    }
    
    
    
    
    void search_node(int key){
        if(search_node_in_BST(root, key)) std::cout << "Yes" << std::endl;
        else std::cout << "No" << std::endl;
    }
    
    bool search_node_in_BST(Node *root, int key){
        if(root == NULL) return false;
        if(root->data == key) return true;
        
        if(key < root->data){ return search_node_in_BST(root->left, key);}
        if(key > root->data){ return search_node_in_BST(root->right, key);}
        
        return false;
    }
};

int main()
{
  int n,i,t,val1, val2, j=1;
  cin>>t;
  while(j<=t){
      cin>>n;
      tree bst;
      std::cout << "Case #" << j << ":" << std::endl;
      for(i=1;i<=n;i++)
      {
          cin>>val1;
          if(val1 != 4) cin >>val2;
    
          if(val1 == 1){
            bst.insert(val2);   
          }else if(val1 == 2){
              bst.delete_node(val2);
          }else if(val1 == 3){
              bst.search_node(val2);
          }else{
              bst.pre();
          }
      }
      
      j++;
   }
}